# These settings control some of the aspects of the QMRF Database web service.
# You must restart Tomcat to make sure that the configuration changes you've
# made become effective.
#
# Folder where the attachments will be stored. If left empty, the default TEMP
# folder will be used. Note that Tomcat needs both read and write access to
# this folder.
qmrf_attachments_dir=${qmrf_attachments_dir}
#
# URI of the Ambit web service used to store and query structures and data via
# the OpenTox REST API. The web service can be downloaded from
# http://ambit.sf.net
# Note that the Ambit database name is expected to be `ambit2-qmrf`. Consult
# the manual on how to create it.
# The default "localhost" may work for local requests (if the Ambit web service
# is installed on the same host), but not for external ones. To enable them
# too, set the option to 'http://YOURHOST:YOURPORT/qmrfdata', where YOURHOST is
# the fully qualified domain name of the host running the Tomcat instance in
# which the qmrfdata web application has been deployed, and YOURPORT is the TCP
# port on that host Tomcat is listening on.
# If the setting is left empty, the query by structure will not be available.
qmrf_ambit_service=${qmrf_ambit_service}
#
# Default project
qmrf_default_project=${qmrf_default_project}
#
# Default organisation
qmrf_default_organisation=${qmrf_default_organisation}
#
# Default owner
qmrf_default_owner=${qmrf_default_owner}
#
# The name of the database that keeps users and roles
users_dbname=tomcat_users
#
# Should we protect resources based on tomcat_users entries?
# "True" by default. Consider changing only for testing purposes.
#qmrf_protected=true
#
# Allow insecure connections to SSL/TLS sites (similar to curl -k option).
# If this option is set to "false", the server certificate needs to be issued
# by a trusted CA. If the option is set to "true", only the confidentiality of
# the connection is guaranteed, but not the authenticity of the other side, so
# this is vulnerable to impersonation and MIM attacks.
insecure=${insecure}
#
# Logo left
logo_left=IHCP_logo.jpg
#
# Logo right
logo_right=JRC_logo.jpg
#
# Secret (used to encrypt cookies)
##################################
# CHANGE THIS TO SOMETHING UNIQUE!
##################################
secret=qJ9tcJiBCezVSKWF
#
# Session timeout in milliseconds. Default is 45 minutes (2700000).
sessiontimeout=2700000
#
# Contact email
qmrf_email=JRC-IHCP-COMPUTOX@ec.europa.eu
#
# Link to the QMRF editor
qmrf_editor=http://qmrf.sf.net/editor
#
# Link to the QMRF template
qmrf_template=http://qmrf.sf.net/template
#
# Link to the QMRF manual
qmrf_manual=http://qmrf.sf.net/manual
#
# Link to the QMRF FAQ
qmrf_faq=http://qmrf.sf.net/faq
#
# Link to the OECD principles
qmrf_oecd=http://ihcp.jrc.ec.europa.eu/our_labs/computational_toxicology/background/oecd-principles
#
# Link to JRC-IHCP
qmrf_jrc=http://ihcp.jrc.ec.europa.eu/
# What to include in the status report  production | debug  ; 
qmrf_status=${qmrf_status}
#Text to show when clicking on external link
qmrf_disclaimer=${qmrf_disclaimer}
#
# User and password for uploading files to the Ambit service, defined with
# "qmrf_ambit_service". The Ambit service should be configured to enable local
# AA (aa.local=true) with the same user and password.
aa.local.admin.name=${aa.local.admin.name}
aa.local.admin.pass=${aa.local.admin.pass}
#
# To enable the QMRF Database to send e-mail notifications on registration and
# alert updates, configure the following SMTP server settings appropriately.
#
# Set to 'true' if SMTP connections should use TLS
mail.smtp.starttls.enable=${notification.mail.smtp.starttls.enable}
#
# Set to 'true' if the SMTP server requires authentication
mail.smtp.auth=${notification.mail.smtp.auth}
#
# This must be set to 'smtp'
mail.transport.protocol=${notification.mail.transport.protocol}
#
# The TCP port on which the SMTP server listens
mail.smtp.port=${notification.mail.smtp.port}
#
# Fallback from TLS; this must be set to 'false'
mail.smtp.socketFactory.fallback=${notification.mail.smtp.socketFactory.fallback}
#
# The fully qualified domain name of the SMTP server
mail.host=${notification.mail.host}
#
# If the SMTP server requires authentication, use this user name
mail.user=${notification.mail.user}
#
# Password for the SMTP user
mail.password=${notification.mail.password}
#
# The email address, which should appear in the FROM: field of the sent emails
notification.admin.email=${notification.admin.email}
# DB related config, moved from qmrf-db/conf/qmrf-db.pref
#DB host
Host=${qmrf.db.host}
#DB scheme
Scheme=jdbc\:mysql
#DB port
Port=3306
#DB name, e.g. qmrf
Database=${qmrf.db}
#DB user 
User=${qmrf.db.user}
#DB password 
Password=${qmrf.db.user.password}
#Only for running tests, the web application does not use it
database.user.root.password=${qmrf.db.user.root.password}
#MySQL test db, user and pass
database.test=${qmrf.db.test}
database.test.port=3306
database.user.test=${qmrf.db.user.test}
database.user.test.password=${qmrf.db.user.password.test}
# REST services config
#Allow to create the database via curl -X POST /admin/database -d "user=root" -d "pass=thepass" -d "dbname=thedbname"
database.create=false
#How to serialize RDF/XML - by Jena (standard, prettier, slower) or StAX (faster)
rdf.writer=stax
#Protect /admin resources via OpenTox AA
aa.admin=false
MAXRECORDS=0
#
# END OF FILE
